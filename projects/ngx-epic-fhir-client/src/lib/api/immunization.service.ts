/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BundleImmunizationDSTU2 } from '../model/bundleImmunizationDSTU2';
import { BundleImmunizationR4 } from '../model/bundleImmunizationR4';
import { BundleImmunizationSTU3 } from '../model/bundleImmunizationSTU3';
import { ImmunizationDSTU2 } from '../model/immunizationDSTU2';
import { ImmunizationR4 } from '../model/immunizationR4';
import { ImmunizationSTU3 } from '../model/immunizationSTU3';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ImmunizationService {

    protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param ID Immunization FHIR ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationReadDSTU2(ID: string, observe?: 'body', reportProgress?: boolean): Observable<ImmunizationDSTU2>;
    public immunizationReadDSTU2(ID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ImmunizationDSTU2>>;
    public immunizationReadDSTU2(ID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ImmunizationDSTU2>>;
    public immunizationReadDSTU2(ID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ID === null || ID === undefined) {
            throw new Error('Required parameter ID was null or undefined when calling immunizationReadDSTU2.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ImmunizationDSTU2>('get',`${this.basePath}/DSTU2/Immunization/${encodeURIComponent(String(ID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ID The Immunization FHIR ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationReadR4(ID: string, observe?: 'body', reportProgress?: boolean): Observable<ImmunizationR4>;
    public immunizationReadR4(ID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ImmunizationR4>>;
    public immunizationReadR4(ID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ImmunizationR4>>;
    public immunizationReadR4(ID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ID === null || ID === undefined) {
            throw new Error('Required parameter ID was null or undefined when calling immunizationReadR4.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ImmunizationR4>('get',`${this.basePath}/R4/Immunization/${encodeURIComponent(String(ID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param ID The Immunization FHIR ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationReadSTU3(ID: string, observe?: 'body', reportProgress?: boolean): Observable<ImmunizationSTU3>;
    public immunizationReadSTU3(ID: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ImmunizationSTU3>>;
    public immunizationReadSTU3(ID: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ImmunizationSTU3>>;
    public immunizationReadSTU3(ID: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (ID === null || ID === undefined) {
            throw new Error('Required parameter ID was null or undefined when calling immunizationReadSTU3.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ImmunizationSTU3>('get',`${this.basePath}/STU3/Immunization/${encodeURIComponent(String(ID))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param date Vaccination administration date.
     * @param patient Reference to the Patient who was immunized.
     * @param status &lt;p&gt;Status of the Immunization. Possible values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;completed&lt;/li&gt; &lt;li&gt;entered-in-error&lt;/li&gt; &lt;li&gt;in-progress&lt;/li&gt; &lt;li&gt;on-hold&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If not provided, will default to include only \&quot;completed\&quot; and \&quot;on-hold\&quot; immunizations.&lt;/p&gt;
     * @param subject Reference to the Patient who was immunized.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationSearchDSTU2(date?: string, patient?: string, status?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<BundleImmunizationDSTU2>;
    public immunizationSearchDSTU2(date?: string, patient?: string, status?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleImmunizationDSTU2>>;
    public immunizationSearchDSTU2(date?: string, patient?: string, status?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleImmunizationDSTU2>>;
    public immunizationSearchDSTU2(date?: string, patient?: string, status?: string, subject?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (patient !== undefined && patient !== null) {
            queryParameters = queryParameters.set('patient', <any>patient);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', <any>subject);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BundleImmunizationDSTU2>('get',`${this.basePath}/DSTU2/Immunization`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param patient Reference to the Patient who was immunized.
     * @param date Vaccination administration date.
     * @param status &lt;p&gt;Status of the Immunization. Possible values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;completed&lt;/li&gt; &lt;li&gt;entered-in-error&lt;/li&gt; &lt;li&gt;not-done&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;*Note: incomplete Immunizations are not supported.&lt;/p&gt; &lt;p&gt; If no status is specified, all statuses are returned.&lt;/p&gt;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationSearchR4(patient: string, date?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<BundleImmunizationR4>;
    public immunizationSearchR4(patient: string, date?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleImmunizationR4>>;
    public immunizationSearchR4(patient: string, date?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleImmunizationR4>>;
    public immunizationSearchR4(patient: string, date?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patient === null || patient === undefined) {
            throw new Error('Required parameter patient was null or undefined when calling immunizationSearchR4.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (patient !== undefined && patient !== null) {
            queryParameters = queryParameters.set('patient', <any>patient);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BundleImmunizationR4>('get',`${this.basePath}/R4/Immunization`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param patient Reference to the Patient who was immunized.
     * @param date Vaccination administration date.
     * @param notgiven Flag for whether the immunization was given. If not provided, defaults to \&quot;false\&quot; to return only given immunizations.
     * @param status &lt;p&gt;Immunization event status. “Completed” is the only supported value, and this value is used by default if no status value is specified.&lt;/p&gt;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public immunizationSearchSTU3(patient: string, date?: string, notgiven?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<BundleImmunizationSTU3>;
    public immunizationSearchSTU3(patient: string, date?: string, notgiven?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleImmunizationSTU3>>;
    public immunizationSearchSTU3(patient: string, date?: string, notgiven?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleImmunizationSTU3>>;
    public immunizationSearchSTU3(patient: string, date?: string, notgiven?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (patient === null || patient === undefined) {
            throw new Error('Required parameter patient was null or undefined when calling immunizationSearchSTU3.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (date !== undefined && date !== null) {
            queryParameters = queryParameters.set('date', <any>date);
        }
        if (notgiven !== undefined && notgiven !== null) {
            queryParameters = queryParameters.set('notgiven', <any>notgiven);
        }
        if (patient !== undefined && patient !== null) {
            queryParameters = queryParameters.set('patient', <any>patient);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BundleImmunizationSTU3>('get',`${this.basePath}/STU3/Immunization`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
