/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BundleMedicationStatementDSTU2 } from '../model/bundleMedicationStatementDSTU2';
import { BundleMedicationStatementSTU3 } from '../model/bundleMedicationStatementSTU3';
import { MedicationStatementDSTU2 } from '../model/medicationStatementDSTU2';
import { MedicationStatementSTU3 } from '../model/medicationStatementSTU3';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class MedicationStatementService {
  protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param ID The FHIR ID of the MedicationStatement resource.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationStatementReadDSTU2(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<MedicationStatementDSTU2>;
  public medicationStatementReadDSTU2(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<MedicationStatementDSTU2>>;
  public medicationStatementReadDSTU2(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<MedicationStatementDSTU2>>;
  public medicationStatementReadDSTU2(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling medicationStatementReadDSTU2.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<MedicationStatementDSTU2>(
      'get',
      `${this.basePath}/DSTU2/MedicationStatement/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The MedicationStatement FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationStatementReadSTU3(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<MedicationStatementSTU3>;
  public medicationStatementReadSTU3(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<MedicationStatementSTU3>>;
  public medicationStatementReadSTU3(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<MedicationStatementSTU3>>;
  public medicationStatementReadSTU3(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling medicationStatementReadSTU3.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<MedicationStatementSTU3>(
      'get',
      `${this.basePath}/STU3/MedicationStatement/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient The FHIR resource ID of the linked patient.
   * @param id The FHIR resource ID of an individual MedicationStatement resource. If specified, other search parameters are ignored.
   * @param status The status of the order. If a status is not provided in the search, then only medications with an active status are returned. This is to avoid end user confusion and protect patient safety.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleMedicationStatementDSTU2>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleMedicationStatementDSTU2>>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleMedicationStatementDSTU2>>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling medicationStatementSearchDSTU2.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleMedicationStatementDSTU2>(
      'get',
      `${this.basePath}/DSTU2/MedicationStatement`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient The FHIR Patient ID. Either this element or Subject is required.
   * @param subject The FHIR patient ID. Either this element or Patient is required.
   * @param category &lt;p&gt;The category of medication orders to search for. By default all categories are searched.&lt;/p&gt;  Supported categories: &lt;ul&gt; &lt;li&gt;inpatient&lt;/li&gt; &lt;li&gt;outpatient&lt;/li&gt; &lt;li&gt;community&lt;/li&gt; &lt;li&gt;patientspecified&lt;/li&gt;  &lt;p&gt;Starting in February 2022 or November 2021 with special update, organizations in the Netherlands can use the code 6 to search for MedicationUse profiles.&lt;/p&gt;
   * @param effective Date when patient was taking (or not taking) the medication.
   * @param status &lt;p&gt;The status for medication orders. By default, active is assumed. Active must be present in all searches (i.e. you cannot search for just completed meds).&lt;/p&gt;  Supported statuses: &lt;ul&gt; &lt;li&gt;On-hold&lt;/li&gt; &lt;li&gt;Completed&lt;/li&gt; &lt;li&gt;Stopped&lt;/li&gt; &lt;li&gt;Active&lt;/li&gt;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationStatementSearchSTU3(
    patient: string,
    subject: string,
    category?: string,
    effective?: string,
    status?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleMedicationStatementSTU3>;
  public medicationStatementSearchSTU3(
    patient: string,
    subject: string,
    category?: string,
    effective?: string,
    status?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleMedicationStatementSTU3>>;
  public medicationStatementSearchSTU3(
    patient: string,
    subject: string,
    category?: string,
    effective?: string,
    status?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleMedicationStatementSTU3>>;
  public medicationStatementSearchSTU3(
    patient: string,
    subject: string,
    category?: string,
    effective?: string,
    status?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling medicationStatementSearchSTU3.'
      );
    }

    if (subject === null || subject === undefined) {
      throw new Error(
        'Required parameter subject was null or undefined when calling medicationStatementSearchSTU3.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (category !== undefined && category !== null) {
      queryParameters = queryParameters.set('category', <any>category);
    }
    if (effective !== undefined && effective !== null) {
      queryParameters = queryParameters.set('effective', <any>effective);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleMedicationStatementSTU3>(
      'get',
      `${this.basePath}/STU3/MedicationStatement`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
