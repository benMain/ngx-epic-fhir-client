/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BundleDocumentReferenceDSTU2 } from '../model/bundleDocumentReferenceDSTU2';
import { BundleDocumentReferenceR4 } from '../model/bundleDocumentReferenceR4';
import { BundleDocumentReferenceSTU3 } from '../model/bundleDocumentReferenceSTU3';
import { DocumentReferenceDSTU2 } from '../model/documentReferenceDSTU2';
import { DocumentReferenceR4 } from '../model/documentReferenceR4';
import { DocumentReferenceSTU3 } from '../model/documentReferenceSTU3';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class DocumentReferenceService {
  protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param body payload
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceCreateClinicalNotesSTU3(
    body: DocumentReferenceSTU3,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DocumentReferenceSTU3>;
  public documentReferenceCreateClinicalNotesSTU3(
    body: DocumentReferenceSTU3,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DocumentReferenceSTU3>>;
  public documentReferenceCreateClinicalNotesSTU3(
    body: DocumentReferenceSTU3,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DocumentReferenceSTU3>>;
  public documentReferenceCreateClinicalNotesSTU3(
    body: DocumentReferenceSTU3,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling documentReferenceCreateClinicalNotesSTU3.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<DocumentReferenceSTU3>(
      'post',
      `${this.basePath}/STU3/DocumentReference`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The DocumentReference FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceReadGeneratedCCDADSTU2(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DocumentReferenceDSTU2>;
  public documentReferenceReadGeneratedCCDADSTU2(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DocumentReferenceDSTU2>>;
  public documentReferenceReadGeneratedCCDADSTU2(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DocumentReferenceDSTU2>>;
  public documentReferenceReadGeneratedCCDADSTU2(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling documentReferenceReadGeneratedCCDADSTU2.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DocumentReferenceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/DocumentReference/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The DocumentReference FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceReadRadiologyResultsR4(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DocumentReferenceR4>;
  public documentReferenceReadRadiologyResultsR4(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DocumentReferenceR4>>;
  public documentReferenceReadRadiologyResultsR4(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DocumentReferenceR4>>;
  public documentReferenceReadRadiologyResultsR4(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling documentReferenceReadRadiologyResultsR4.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DocumentReferenceR4>(
      'get',
      `${this.basePath}/R4/DocumentReference/${encodeURIComponent(String(ID))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The DocumentReference FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceReadRadiologyResultsSTU3(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<DocumentReferenceSTU3>;
  public documentReferenceReadRadiologyResultsSTU3(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<DocumentReferenceSTU3>>;
  public documentReferenceReadRadiologyResultsSTU3(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<DocumentReferenceSTU3>>;
  public documentReferenceReadRadiologyResultsSTU3(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling documentReferenceReadRadiologyResultsSTU3.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<DocumentReferenceSTU3>(
      'get',
      `${this.basePath}/STU3/DocumentReference/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param id Search for DocumentReference resources using one or more server IDs (equivalent to one or more Get /DocumentReference/{ID} requests). If _id is included in your search, all other parameters are ignored.
   * @param _class Refine a search for DocumentReference resources by passing a LOINC code for document class (CCD and encounter supported). The default LOINC code for CCD is 34133-9 - Summarization of Episode Note. The default LOINC code for Encounter is 11506-3 - Subsequent Evaluation Note.
   * @param patient Search for DocumentReference resources for a specified patient ID. You can use \&quot;patient\&quot; or \&quot;subject\&quot; equivalently, but they cannot be used at the same time for different references.
   * @param period Refine a search for DocumentReference resources by specifying a date or date range for the DocumentReference content. Enter dates in ISO 8601 format (YYYY[-MM[-DD[THH:MM[:SS][TZ]]]]). Local server time is assumed if time zone information is not included. Common FHIR operators such as gt, lt, ge, le, &#x3D;, and ap are supported. When no period is specified, a customer setting is used to determine how far to look back. There is also a setting capping lookback. Another setting can limit what encounter types are returned. Encounters without clinical data will not be returned.
   * @param subject Search for DocumentReference resources for a specified patient ID. You can use \&quot;patient\&quot; or \&quot;subject\&quot; equivalently, but they cannot be used at the same time for different references.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceSearchGeneratedCCDADSTU2(
    id?: string,
    _class?: string,
    patient?: string,
    period?: string,
    subject?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleDocumentReferenceDSTU2>;
  public documentReferenceSearchGeneratedCCDADSTU2(
    id?: string,
    _class?: string,
    patient?: string,
    period?: string,
    subject?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleDocumentReferenceDSTU2>>;
  public documentReferenceSearchGeneratedCCDADSTU2(
    id?: string,
    _class?: string,
    patient?: string,
    period?: string,
    subject?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleDocumentReferenceDSTU2>>;
  public documentReferenceSearchGeneratedCCDADSTU2(
    id?: string,
    _class?: string,
    patient?: string,
    period?: string,
    subject?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (_class !== undefined && _class !== null) {
      queryParameters = queryParameters.set('class', <any>_class);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (period !== undefined && period !== null) {
      queryParameters = queryParameters.set('period', <any>period);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleDocumentReferenceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/DocumentReference`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param author FHIR ID for the providers who signed or addended the study.
   * @param category Must be set to “imaging-result” if specified.
   * @param date The instant or range of instants when a study was addended or finalized.
   * @param patient The subject of the report if a patient
   * @param period The instant when the exam was performed.
   * @param subject The patient that is the subject of the note.
   * @param type The LOINC or system code for the radiology result.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceSearchRadiologyResultsR4(
    author?: string,
    category?: string,
    date?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleDocumentReferenceR4>;
  public documentReferenceSearchRadiologyResultsR4(
    author?: string,
    category?: string,
    date?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleDocumentReferenceR4>>;
  public documentReferenceSearchRadiologyResultsR4(
    author?: string,
    category?: string,
    date?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleDocumentReferenceR4>>;
  public documentReferenceSearchRadiologyResultsR4(
    author?: string,
    category?: string,
    date?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (author !== undefined && author !== null) {
      queryParameters = queryParameters.set('author', <any>author);
    }
    if (category !== undefined && category !== null) {
      queryParameters = queryParameters.set('category', <any>category);
    }
    if (date !== undefined && date !== null) {
      queryParameters = queryParameters.set('date', <any>date);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (period !== undefined && period !== null) {
      queryParameters = queryParameters.set('period', <any>period);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set('type', <any>type);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleDocumentReferenceR4>(
      'get',
      `${this.basePath}/R4/DocumentReference`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param author FHIR ID for the providers who signed or addended the study.
   * @param _class Must be set to “imaging-result” if specified.
   * @param indexed The instant or range of instants when a study was addended or finalized.
   * @param patient FHIR Patient ID. If provided, the search returns all matching results for this patient.
   * @param period The instant when the exam was performed.
   * @param subject FHIR Patient ID. If provided, the search returns all matching results for this patient.
   * @param type LOINC code for the radiology result.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public documentReferenceSearchRadiologyResultsSTU3(
    author?: string,
    _class?: string,
    indexed?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleDocumentReferenceSTU3>;
  public documentReferenceSearchRadiologyResultsSTU3(
    author?: string,
    _class?: string,
    indexed?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleDocumentReferenceSTU3>>;
  public documentReferenceSearchRadiologyResultsSTU3(
    author?: string,
    _class?: string,
    indexed?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleDocumentReferenceSTU3>>;
  public documentReferenceSearchRadiologyResultsSTU3(
    author?: string,
    _class?: string,
    indexed?: string,
    patient?: string,
    period?: string,
    subject?: string,
    type?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (author !== undefined && author !== null) {
      queryParameters = queryParameters.set('author', <any>author);
    }
    if (_class !== undefined && _class !== null) {
      queryParameters = queryParameters.set('class', <any>_class);
    }
    if (indexed !== undefined && indexed !== null) {
      queryParameters = queryParameters.set('indexed', <any>indexed);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (period !== undefined && period !== null) {
      queryParameters = queryParameters.set('period', <any>period);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set('type', <any>type);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleDocumentReferenceSTU3>(
      'get',
      `${this.basePath}/STU3/DocumentReference`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
