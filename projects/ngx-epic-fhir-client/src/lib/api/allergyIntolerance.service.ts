/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { AllergyIntoleranceDSTU2 } from '../model/allergyIntoleranceDSTU2';
import { AllergyIntoleranceR4 } from '../model/allergyIntoleranceR4';
import { AllergyIntoleranceSTU3 } from '../model/allergyIntoleranceSTU3';
import { BundleAllergyIntoleranceDSTU2 } from '../model/bundleAllergyIntoleranceDSTU2';
import { BundleAllergyIntoleranceR4 } from '../model/bundleAllergyIntoleranceR4';
import { BundleAllergyIntoleranceSTU3 } from '../model/bundleAllergyIntoleranceSTU3';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class AllergyIntoleranceService {
  protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param body payload
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceCreateR4(
    body: AllergyIntoleranceR4,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllergyIntoleranceR4>;
  public allergyIntoleranceCreateR4(
    body: AllergyIntoleranceR4,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllergyIntoleranceR4>>;
  public allergyIntoleranceCreateR4(
    body: AllergyIntoleranceR4,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllergyIntoleranceR4>>;
  public allergyIntoleranceCreateR4(
    body: AllergyIntoleranceR4,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling allergyIntoleranceCreateR4.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AllergyIntoleranceR4>(
      'post',
      `${this.basePath}/R4/AllergyIntolerance`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param body payload
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceCreateSTU3(
    body: AllergyIntoleranceSTU3,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllergyIntoleranceSTU3>;
  public allergyIntoleranceCreateSTU3(
    body: AllergyIntoleranceSTU3,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllergyIntoleranceSTU3>>;
  public allergyIntoleranceCreateSTU3(
    body: AllergyIntoleranceSTU3,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllergyIntoleranceSTU3>>;
  public allergyIntoleranceCreateSTU3(
    body: AllergyIntoleranceSTU3,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling allergyIntoleranceCreateSTU3.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.request<AllergyIntoleranceSTU3>(
      'post',
      `${this.basePath}/STU3/AllergyIntolerance`,
      {
        body: body,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The AllergyIntolerance FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceReadDSTU2(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllergyIntoleranceDSTU2>;
  public allergyIntoleranceReadDSTU2(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllergyIntoleranceDSTU2>>;
  public allergyIntoleranceReadDSTU2(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllergyIntoleranceDSTU2>>;
  public allergyIntoleranceReadDSTU2(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling allergyIntoleranceReadDSTU2.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AllergyIntoleranceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/AllergyIntolerance/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The AllergyIntolerance FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceReadR4(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllergyIntoleranceR4>;
  public allergyIntoleranceReadR4(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllergyIntoleranceR4>>;
  public allergyIntoleranceReadR4(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllergyIntoleranceR4>>;
  public allergyIntoleranceReadR4(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling allergyIntoleranceReadR4.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AllergyIntoleranceR4>(
      'get',
      `${this.basePath}/R4/AllergyIntolerance/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param ID The AllergyIntolerance FHIR ID.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceReadSTU3(
    ID: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<AllergyIntoleranceSTU3>;
  public allergyIntoleranceReadSTU3(
    ID: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<AllergyIntoleranceSTU3>>;
  public allergyIntoleranceReadSTU3(
    ID: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<AllergyIntoleranceSTU3>>;
  public allergyIntoleranceReadSTU3(
    ID: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (ID === null || ID === undefined) {
      throw new Error(
        'Required parameter ID was null or undefined when calling allergyIntoleranceReadSTU3.'
      );
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<AllergyIntoleranceSTU3>(
      'get',
      `${this.basePath}/STU3/AllergyIntolerance/${encodeURIComponent(
        String(ID)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient Reference to a patient resource.
   * @param subject Reference to a patient resource.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleAllergyIntoleranceDSTU2>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleAllergyIntoleranceDSTU2>>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleAllergyIntoleranceDSTU2>>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleAllergyIntoleranceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/AllergyIntolerance`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient Reference to a patient resource.
   * @param clinicalStatus &lt;p&gt;The current status of the allergy. Only \&quot;active\&quot; is accepted. &lt;p&gt;Starting in the August 2021 version of Epic, this parameter is no longer required, and if is not specified, both active and inactive/resolved allergies are returned.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceSearchR4(
    patient: string,
    clinicalStatus?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleAllergyIntoleranceR4>;
  public allergyIntoleranceSearchR4(
    patient: string,
    clinicalStatus?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleAllergyIntoleranceR4>>;
  public allergyIntoleranceSearchR4(
    patient: string,
    clinicalStatus?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleAllergyIntoleranceR4>>;
  public allergyIntoleranceSearchR4(
    patient: string,
    clinicalStatus?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling allergyIntoleranceSearchR4.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (clinicalStatus !== undefined && clinicalStatus !== null) {
      queryParameters = queryParameters.set(
        'clinical-status',
        <any>clinicalStatus
      );
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleAllergyIntoleranceR4>(
      'get',
      `${this.basePath}/R4/AllergyIntolerance`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient Reference to a patient resource.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceSearchSTU3(
    patient: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleAllergyIntoleranceSTU3>;
  public allergyIntoleranceSearchSTU3(
    patient: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleAllergyIntoleranceSTU3>>;
  public allergyIntoleranceSearchSTU3(
    patient: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleAllergyIntoleranceSTU3>>;
  public allergyIntoleranceSearchSTU3(
    patient: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling allergyIntoleranceSearchSTU3.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleAllergyIntoleranceSTU3>(
      'get',
      `${this.basePath}/STU3/AllergyIntolerance`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
