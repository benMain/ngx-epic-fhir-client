/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BundleDocumentReferenceDSTU2 } from '../model/bundleDocumentReferenceDSTU2';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SearchGeneratedCCDADSTU2Service {

    protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id Search for DocumentReference resources using one or more server IDs (equivalent to one or more Get /DocumentReference/{ID} requests). If _id is included in your search, all other parameters are ignored.
     * @param _class Refine a search for DocumentReference resources by passing a LOINC code for document class (CCD and encounter supported). The default LOINC code for CCD is 34133-9 - Summarization of Episode Note. The default LOINC code for Encounter is 11506-3 - Subsequent Evaluation Note.
     * @param patient Search for DocumentReference resources for a specified patient ID. You can use \&quot;patient\&quot; or \&quot;subject\&quot; equivalently, but they cannot be used at the same time for different references.
     * @param period Refine a search for DocumentReference resources by specifying a date or date range for the DocumentReference content. Enter dates in ISO 8601 format (YYYY[-MM[-DD[THH:MM[:SS][TZ]]]]). Local server time is assumed if time zone information is not included. Common FHIR operators such as gt, lt, ge, le, &#x3D;, and ap are supported. When no period is specified, a customer setting is used to determine how far to look back. There is also a setting capping lookback. Another setting can limit what encounter types are returned. Encounters without clinical data will not be returned.
     * @param subject Search for DocumentReference resources for a specified patient ID. You can use \&quot;patient\&quot; or \&quot;subject\&quot; equivalently, but they cannot be used at the same time for different references.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public documentReferenceSearchGeneratedCCDADSTU2(id?: string, _class?: string, patient?: string, period?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<BundleDocumentReferenceDSTU2>;
    public documentReferenceSearchGeneratedCCDADSTU2(id?: string, _class?: string, patient?: string, period?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleDocumentReferenceDSTU2>>;
    public documentReferenceSearchGeneratedCCDADSTU2(id?: string, _class?: string, patient?: string, period?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleDocumentReferenceDSTU2>>;
    public documentReferenceSearchGeneratedCCDADSTU2(id?: string, _class?: string, patient?: string, period?: string, subject?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('_id', <any>id);
        }
        if (_class !== undefined && _class !== null) {
            queryParameters = queryParameters.set('class', <any>_class);
        }
        if (patient !== undefined && patient !== null) {
            queryParameters = queryParameters.set('patient', <any>patient);
        }
        if (period !== undefined && period !== null) {
            queryParameters = queryParameters.set('period', <any>period);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', <any>subject);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BundleDocumentReferenceDSTU2>('get',`${this.basePath}/DSTU2/DocumentReference`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
