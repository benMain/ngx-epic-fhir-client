/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { BundleConsentSTU3 } from '../model/bundleConsentSTU3';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SearchDocumentSTU3Service {

    protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param category &lt;p&gt;The type of consent document. This value follows the specification of the FHIR ConsentCategoryCodes (consent-category) value set, which includes LOINC codes and other identifiers. Additional values can be mapped by Epic organizations if desired.&lt;/p&gt; &lt;p&gt;Supported consent categories include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;59284-0 (Consent Document)&lt;/li&gt; &lt;li&gt;64292-6 (Release of information Consent Document)&lt;/li&gt; &lt;li&gt;84095-9 (Do not resuscitate)&lt;/li&gt; &lt;li&gt;59284-0 (Clinical Consent)&lt;/li&gt; &lt;li&gt;64293-4 (Procedure Consent Document)&lt;/li&gt; &lt;li&gt;61359-6 (Anesthesia Consent Document)&lt;/li&gt; &lt;li&gt;61358-8 (Surgical operation Consent Document)&lt;/li&gt; &lt;li&gt;52027-0 (Abortion Consent Document)&lt;/li&gt; &lt;li&gt;52029-6 (Sterilization Consent Document)&lt;/li&gt; &lt;li&gt;64300-7 (Organ donation Consent Document)&lt;/li&gt; &lt;li&gt;83930-8 (Research Consent Document)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This API also supports SNOMED code 11341000146107-Advance Directive as a category.&lt;/p&gt;
     * @param patient FHIR ID for the Patient the consent applies to.
     * @param status &lt;p&gt;The state of the consent. This value follows the specification of the FHIR ConsentState value set. The following values have default out-of-the-box support in Epic. Additional statuses can be mapped by Epic organizations if desired.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;draft&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Corresponds to Epic value 11-Not Received&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;active&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Corresponds to Epic values 10-Received and 20-Accepted&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;rejected&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Corresponds to Epic value 1-Unknown&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;entered-in-error&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Corresponds to Epic value 35-Error&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;inactive&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Does not correspond to any Epic value by default&lt;/li&gt; &lt;/ul&gt; &lt;li&gt;proposed&lt;/li&gt; &lt;ul&gt; &lt;li&gt;Does not correspond to any Epic value by default&lt;/li&gt; &lt;/ul&gt; &lt;/ul&gt; &lt;p&gt;Consent documents with no status specified in Epic are returned when searching without a status parameter&lt;/p&gt;
     * @param subject FHIR ID for the Patient the consent applies to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public consentSearchDocumentSTU3(category?: string, patient?: string, status?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<BundleConsentSTU3>;
    public consentSearchDocumentSTU3(category?: string, patient?: string, status?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<BundleConsentSTU3>>;
    public consentSearchDocumentSTU3(category?: string, patient?: string, status?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<BundleConsentSTU3>>;
    public consentSearchDocumentSTU3(category?: string, patient?: string, status?: string, subject?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (category !== undefined && category !== null) {
            queryParameters = queryParameters.set('category', <any>category);
        }
        if (patient !== undefined && patient !== null) {
            queryParameters = queryParameters.set('patient', <any>patient);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (subject !== undefined && subject !== null) {
            queryParameters = queryParameters.set('subject', <any>subject);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer_auth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<BundleConsentSTU3>('get',`${this.basePath}/STU3/Consent`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
