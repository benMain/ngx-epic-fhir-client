/**
 * Epic on Fhir
 * All of the components of the Change Healthcare Interoperability Apis
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bmain@lumeris.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ /* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { BundleAllergyIntoleranceDSTU2 } from '../model/bundleAllergyIntoleranceDSTU2';
import { BundleDeviceDSTU2 } from '../model/bundleDeviceDSTU2';
import { BundleFamilyMemberHistoryDSTU2 } from '../model/bundleFamilyMemberHistoryDSTU2';
import { BundleImmunizationDSTU2 } from '../model/bundleImmunizationDSTU2';
import { BundleMedicationDSTU2 } from '../model/bundleMedicationDSTU2';
import { BundleMedicationOrderDSTU2 } from '../model/bundleMedicationOrderDSTU2';
import { BundleMedicationStatementDSTU2 } from '../model/bundleMedicationStatementDSTU2';
import { BundlePatientDSTU2 } from '../model/bundlePatientDSTU2';
import { BundlePractitionerDSTU2 } from '../model/bundlePractitionerDSTU2';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class SearchDSTU2Service {
  protected basePath = 'https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   *
   *
   * @param patient Reference to a patient resource.
   * @param subject Reference to a patient resource.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleAllergyIntoleranceDSTU2>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleAllergyIntoleranceDSTU2>>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleAllergyIntoleranceDSTU2>>;
  public allergyIntoleranceSearchDSTU2(
    patient?: string,
    subject?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleAllergyIntoleranceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/AllergyIntolerance`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient &lt;p&gt;Patient is always required.&lt;/p&gt;
   * @param id A parameter
   * @param type &lt;p&gt;The type of the device.&lt;/p&gt;
   * @param udi &lt;p&gt;FDA mandated Unique Device Identifier.&lt;/p&gt;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deviceSearchDSTU2(
    patient: string,
    id?: string,
    type?: string,
    udi?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleDeviceDSTU2>;
  public deviceSearchDSTU2(
    patient: string,
    id?: string,
    type?: string,
    udi?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleDeviceDSTU2>>;
  public deviceSearchDSTU2(
    patient: string,
    id?: string,
    type?: string,
    udi?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleDeviceDSTU2>>;
  public deviceSearchDSTU2(
    patient: string,
    id?: string,
    type?: string,
    udi?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling deviceSearchDSTU2.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (type !== undefined && type !== null) {
      queryParameters = queryParameters.set('type', <any>type);
    }
    if (udi !== undefined && udi !== null) {
      queryParameters = queryParameters.set('udi', <any>udi);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleDeviceDSTU2>(
      'get',
      `${this.basePath}/DSTU2/Device`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient The Patient resource with the associated FamilyMemberHistory.
   * @param subject The Patient resource with the associated FamilyMemberHistory.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public familyMemberHistorySearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleFamilyMemberHistoryDSTU2>;
  public familyMemberHistorySearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleFamilyMemberHistoryDSTU2>>;
  public familyMemberHistorySearchDSTU2(
    patient?: string,
    subject?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleFamilyMemberHistoryDSTU2>>;
  public familyMemberHistorySearchDSTU2(
    patient?: string,
    subject?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleFamilyMemberHistoryDSTU2>(
      'get',
      `${this.basePath}/DSTU2/FamilyMemberHistory`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param date Vaccination administration date.
   * @param patient Reference to the Patient who was immunized.
   * @param status &lt;p&gt;Status of the Immunization. Possible values are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;completed&lt;/li&gt; &lt;li&gt;entered-in-error&lt;/li&gt; &lt;li&gt;in-progress&lt;/li&gt; &lt;li&gt;on-hold&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If not provided, will default to include only \&quot;completed\&quot; and \&quot;on-hold\&quot; immunizations.&lt;/p&gt;
   * @param subject Reference to the Patient who was immunized.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public immunizationSearchDSTU2(
    date?: string,
    patient?: string,
    status?: string,
    subject?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleImmunizationDSTU2>;
  public immunizationSearchDSTU2(
    date?: string,
    patient?: string,
    status?: string,
    subject?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleImmunizationDSTU2>>;
  public immunizationSearchDSTU2(
    date?: string,
    patient?: string,
    status?: string,
    subject?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleImmunizationDSTU2>>;
  public immunizationSearchDSTU2(
    date?: string,
    patient?: string,
    status?: string,
    subject?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (date !== undefined && date !== null) {
      queryParameters = queryParameters.set('date', <any>date);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleImmunizationDSTU2>(
      'get',
      `${this.basePath}/DSTU2/Immunization`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient FHIR ID for a patient to list dispenses for.
   * @param subject FHIR ID for a patient to list dispenses for.
   * @param id FHIR ID of the MedicationOrder resource(s). If _id is included in the search, all other parameters are ignored.
   * @param status By default, active medications are returned. Statuses of completed, on-hold, and stopped can also be specified.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationOrderSearchDSTU2(
    patient: string,
    subject: string,
    id?: string,
    status?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleMedicationOrderDSTU2>;
  public medicationOrderSearchDSTU2(
    patient: string,
    subject: string,
    id?: string,
    status?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleMedicationOrderDSTU2>>;
  public medicationOrderSearchDSTU2(
    patient: string,
    subject: string,
    id?: string,
    status?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleMedicationOrderDSTU2>>;
  public medicationOrderSearchDSTU2(
    patient: string,
    subject: string,
    id?: string,
    status?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling medicationOrderSearchDSTU2.'
      );
    }

    if (subject === null || subject === undefined) {
      throw new Error(
        'Required parameter subject was null or undefined when calling medicationOrderSearchDSTU2.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }
    if (subject !== undefined && subject !== null) {
      queryParameters = queryParameters.set('subject', <any>subject);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleMedicationOrderDSTU2>(
      'get',
      `${this.basePath}/DSTU2/MedicationOrder`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param id &lt;p&gt;The FHIR ID referencing a medication.&lt;/p&gt;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationSearchDSTU2(
    id: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleMedicationDSTU2>;
  public medicationSearchDSTU2(
    id: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleMedicationDSTU2>>;
  public medicationSearchDSTU2(
    id: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleMedicationDSTU2>>;
  public medicationSearchDSTU2(
    id: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling medicationSearchDSTU2.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleMedicationDSTU2>(
      'get',
      `${this.basePath}/DSTU2/Medication`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param patient The FHIR resource ID of the linked patient.
   * @param id The FHIR resource ID of an individual MedicationStatement resource. If specified, other search parameters are ignored.
   * @param status The status of the order. If a status is not provided in the search, then only medications with an active status are returned. This is to avoid end user confusion and protect patient safety.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundleMedicationStatementDSTU2>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundleMedicationStatementDSTU2>>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundleMedicationStatementDSTU2>>;
  public medicationStatementSearchDSTU2(
    patient: string,
    id?: string,
    status?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (patient === null || patient === undefined) {
      throw new Error(
        'Required parameter patient was null or undefined when calling medicationStatementSearchDSTU2.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (patient !== undefined && patient !== null) {
      queryParameters = queryParameters.set('patient', <any>patient);
    }
    if (status !== undefined && status !== null) {
      queryParameters = queryParameters.set('status', <any>status);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundleMedicationStatementDSTU2>(
      'get',
      `${this.basePath}/DSTU2/MedicationStatement`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param id The Patient&#x27;s FHIR ID.
   * @param address Addresses for the patient.
   * @param birthdate The patient&#x27;s date of birth in the format YYYY-MM-DD.
   * @param family The patient&#x27;s family (last) name.
   * @param gender The patient&#x27;s legal sex.
   * @param given The patient&#x27;s given name. May include first and middle names.
   * @param identifier Identifiers and assigning authorities associated with a patient. These are of the format &amp;lt;OID&amp;gt;|&amp;lt;value&amp;gt;.
   * @param telecom Telephone numbers and email addresses for the patient, along with their use (i.e. home, work, etc.)
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public patientSearchDSTU2(
    id?: string,
    address?: string,
    birthdate?: string,
    family?: string,
    gender?: string,
    given?: string,
    identifier?: string,
    telecom?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundlePatientDSTU2>;
  public patientSearchDSTU2(
    id?: string,
    address?: string,
    birthdate?: string,
    family?: string,
    gender?: string,
    given?: string,
    identifier?: string,
    telecom?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundlePatientDSTU2>>;
  public patientSearchDSTU2(
    id?: string,
    address?: string,
    birthdate?: string,
    family?: string,
    gender?: string,
    given?: string,
    identifier?: string,
    telecom?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundlePatientDSTU2>>;
  public patientSearchDSTU2(
    id?: string,
    address?: string,
    birthdate?: string,
    family?: string,
    gender?: string,
    given?: string,
    identifier?: string,
    telecom?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (id !== undefined && id !== null) {
      queryParameters = queryParameters.set('_id', <any>id);
    }
    if (address !== undefined && address !== null) {
      queryParameters = queryParameters.set('address', <any>address);
    }
    if (birthdate !== undefined && birthdate !== null) {
      queryParameters = queryParameters.set('birthdate', <any>birthdate);
    }
    if (family !== undefined && family !== null) {
      queryParameters = queryParameters.set('family', <any>family);
    }
    if (gender !== undefined && gender !== null) {
      queryParameters = queryParameters.set('gender', <any>gender);
    }
    if (given !== undefined && given !== null) {
      queryParameters = queryParameters.set('given', <any>given);
    }
    if (identifier !== undefined && identifier !== null) {
      queryParameters = queryParameters.set('identifier', <any>identifier);
    }
    if (telecom !== undefined && telecom !== null) {
      queryParameters = queryParameters.set('telecom', <any>telecom);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundlePatientDSTU2>(
      'get',
      `${this.basePath}/DSTU2/Patient`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   *
   *
   * @param address Search for Practitioner resources by any part of an address, such as street or city, where a practitioner can be found.
   * @param addressCity Search for Practitioner resources using the city portion of the address at which the practitioner can be found. This parameter must be used with the address_postalcode parameter.
   * @param addressPostalcode Search for Practitioner resources using the postal code portion of the address at which the practitioner can be found.
   * @param addressState Search for Practitioner resources using the state portion of the address at which the practitioner can be found.
   * @param family &lt;p&gt;Search for Practitioner resources by family (last) name. Family name searching supports both exact and \&quot;sounds like\&quot; matches.&lt;/p&gt;  &lt;p&gt;Either Family or Specialty is required for a search to succeed.&lt;/p&gt;
   * @param gender Search for Practitioner resources using the following gender codes: \&quot;female\&quot;, \&quot;male\&quot;, or \&quot;unknown\&quot;.
   * @param given Search for Practitioner resources by given (first) name. Given name searching supports both exact and \&quot;sounds like\&quot; matches.
   * @param specialty &lt;p&gt;Search for Practitioner resources by specialty in the format [code system]|[code].&lt;/p&gt;  &lt;p&gt;Either Family or Specialty is required for a search to succeed.&lt;/p&gt;
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public practitionerSearchDSTU2(
    address?: string,
    addressCity?: string,
    addressPostalcode?: string,
    addressState?: string,
    family?: string,
    gender?: string,
    given?: string,
    specialty?: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<BundlePractitionerDSTU2>;
  public practitionerSearchDSTU2(
    address?: string,
    addressCity?: string,
    addressPostalcode?: string,
    addressState?: string,
    family?: string,
    gender?: string,
    given?: string,
    specialty?: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<BundlePractitionerDSTU2>>;
  public practitionerSearchDSTU2(
    address?: string,
    addressCity?: string,
    addressPostalcode?: string,
    addressState?: string,
    family?: string,
    gender?: string,
    given?: string,
    specialty?: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<BundlePractitionerDSTU2>>;
  public practitionerSearchDSTU2(
    address?: string,
    addressCity?: string,
    addressPostalcode?: string,
    addressState?: string,
    family?: string,
    gender?: string,
    given?: string,
    specialty?: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (address !== undefined && address !== null) {
      queryParameters = queryParameters.set('address', <any>address);
    }
    if (addressCity !== undefined && addressCity !== null) {
      queryParameters = queryParameters.set('address_city', <any>addressCity);
    }
    if (addressPostalcode !== undefined && addressPostalcode !== null) {
      queryParameters = queryParameters.set(
        'address_postalcode',
        <any>addressPostalcode
      );
    }
    if (addressState !== undefined && addressState !== null) {
      queryParameters = queryParameters.set('address_state', <any>addressState);
    }
    if (family !== undefined && family !== null) {
      queryParameters = queryParameters.set('family', <any>family);
    }
    if (gender !== undefined && gender !== null) {
      queryParameters = queryParameters.set('gender', <any>gender);
    }
    if (given !== undefined && given !== null) {
      queryParameters = queryParameters.set('given', <any>given);
    }
    if (specialty !== undefined && specialty !== null) {
      queryParameters = queryParameters.set('specialty', <any>specialty);
    }

    let headers = this.defaultHeaders;

    // authentication (bearer_auth) required
    if (
      this.configuration.apiKeys &&
      this.configuration.apiKeys['Authorization']
    ) {
      headers = headers.set(
        'Authorization',
        this.configuration.apiKeys['Authorization']
      );
    }

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.request<BundlePractitionerDSTU2>(
      'get',
      `${this.basePath}/DSTU2/Practitioner`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
